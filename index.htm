<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>לו"ז מייקר</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Assistant:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Assistant', sans-serif;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 10px;
        }
        .wizard-step {
            display: none;
        }
        .wizard-step.active {
            display: block;
        }
    </style>
</head>
<body class="bg-gray-100">

    <div class="container mx-auto p-4">
        <header class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-gray-800">לו"ז מייקר</h1>
            <div>
                <button id="helpBtn" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition">עזרה</button>
                <button id="feedbackBtn" class="bg-green-500 text-white px-4 py-2 rounded-lg shadow hover:bg-green-600 transition">משוב</button>
            </div>
        </header>

        <main id="line-groups-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Line groups will be dynamically added here -->
        </main>

        <div class="mt-6">
            <button id="addLineGroupBtn" class="bg-indigo-500 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-indigo-600 transition w-full">הוסף קבוצת קווים</button>
        </div>
    </div>

    <!-- Help Modal -->
    <div id="helpModal" class="modal">
        <div class="modal-content">
            <span class="close-btn float-left text-2xl cursor-pointer">&times;</span>
            <h2 class="text-2xl font-bold mb-4">עזרה</h2>
            <p>ברוכים הבאים ל"לו\"ז מייקר"!<br>
            <b>קבוצות קווים:</b> ניתן ליצור קבוצות של קווים ותחנות שבהם אתם נוסעים באופן קבוע.<br>
            <b>יצירת לו"ז:</b> לאחר יצירת קבוצה, תוכלו ליצור לוח זמנים מותאם אישית למספר ימים.<br>
            <b>ייצוא:</b> את לוח הזמנים ניתן לייצא לקובץ PDF או CSV.<br>
            <b>משוב:</b> נשמח לשמוע את דעתכם! לחצו על כפתור "משוב" כדי לשלוח לנו את הערותיכם.</p>
        </div>
    </div>

    <!-- Add/Edit Line Group Modal -->
    <div id="lineGroupModal" class="modal">
        <div class="modal-content">
            <span class="close-btn float-left text-2xl cursor-pointer">&times;</span>
            <h2 id="lineGroupModalTitle" class="text-2xl font-bold mb-4">הוסף קבוצת קווים</h2>
            <div id="lineGroupWizard">
                <!-- Step 1: Group Name -->
                <div class="wizard-step active">
                    <label for="groupName" class="block mb-2">שם קבוצת הקווים:</label>
                    <input type="text" id="groupName" class="w-full p-2 border rounded">
                </div>
                <!-- Step 2: Select Lines -->
                <div class="wizard-step">
                    <h3 class="font-bold mb-2">בחר קווים:</h3>
                    <div class="flex mb-2">
                        <input type="text" id="lineNumberInput" placeholder="הכנס מספר קו" class="w-full p-2 border rounded-r-lg">
                        <button id="searchRoutesBtn" class="bg-blue-500 text-white px-4 py-2 rounded-l-lg hover:bg-blue-600">חפש</button>
                    </div>
                    <div id="routesList" class="max-h-48 overflow-y-auto border rounded p-2">
                        <!-- Routes will be listed here -->
                    </div>
                     <div id="selectedLines" class="mt-4">
                        <h4 class="font-bold">קווים שנבחרו:</h4>
                        <ul id="selectedLinesList" class="list-disc list-inside"></ul>
                    </div>
                </div>
                <!-- Step 3: Select Stations -->
                <div class="wizard-step">
                    <h3 class="font-bold mb-2">בחר תחנות:</h3>
                    <div id="stationsSelection" class="space-y-4">
                        <!-- Station selection for each line will be here -->
                    </div>
                </div>
            </div>
            <div class="flex justify-between mt-6">
                <button id="prevBtn" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">הקודם</button>
                <button id="nextBtn" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">הבא</button>
                <button id="saveGroupBtn" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" style="display: none;">שמור</button>
            </div>
        </div>
    </div>

    <!-- Create Schedule Modal -->
    <div id="scheduleModal" class="modal">
        <div class="modal-content">
            <span class="close-btn float-left text-2xl cursor-pointer">&times;</span>
            <h2 class="text-2xl font-bold mb-4">יצירת לו"ז</h2>
             <div id="scheduleWizard">
                <!-- Step 1: Date Selection -->
                <div class="wizard-step active">
                    <h3 class="font-bold mb-2">בחר עד 5 ימים מהשבועיים הקרובים:</h3>
                    <div id="dateSelection" class="grid grid-cols-2 gap-2"></div>
                </div>
                <!-- Step 2: Progress and Download -->
                <div class="wizard-step">
                    <div id="progressBarContainer" class="w-full bg-gray-200 rounded-full h-6">
                        <div id="progressBar" class="bg-blue-600 h-6 text-xs font-medium text-blue-100 text-center p-1 leading-none rounded-full" style="width: 0%">0%</div>
                    </div>
                    <p id="progressText" class="text-center mt-2"></p>
                    <div id="downloadSection" class="mt-4 hidden">
                         <h3 class="font-bold mb-2">הורדת לוחות זמנים:</h3>
                         <div id="downloadLinks" class="space-y-2"></div>
                         <button id="downloadAllPdfBtn" class="bg-red-500 text-white px-4 py-2 rounded-lg mt-4 w-full">הורד הכל כ-PDF</button>
                    </div>
                </div>
            </div>
             <div class="flex justify-between mt-6">
                <button id="schedulePrevBtn" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">הקודם</button>
                <button id="scheduleNextBtn" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">צור לו"ז</button>
                 <button id="scheduleFinishBtn" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" style="display: none;">סיימתי</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const addLineGroupBtn = document.getElementById('addLineGroupBtn');
            const lineGroupModal = document.getElementById('lineGroupModal');
            const scheduleModal = document.getElementById('scheduleModal');
            const helpModal = document.getElementById('helpModal');
            const helpBtn = document.getElementById('helpBtn');
            const feedbackBtn = document.getElementById('feedbackBtn');
            const closeBtns = document.querySelectorAll('.close-btn');

            const lineGroupsContainer = document.getElementById('line-groups-container');

            let lineGroups = JSON.parse(localStorage.getItem('lineGroups')) || [];
            let currentGroup = null;
            let currentGroupIndex = -1;

            // Wizard for adding/editing line group
            const lineGroupWizard = {
                steps: document.querySelectorAll('#lineGroupWizard .wizard-step'),
                prevBtn: document.getElementById('prevBtn'),
                nextBtn: document.getElementById('nextBtn'),
                saveBtn: document.getElementById('saveGroupBtn'),
                currentStep: 0,

                init() {
                    this.prevBtn.addEventListener('click', () => this.changeStep(-1));
                    this.nextBtn.addEventListener('click', () => this.changeStep(1));
                    this.saveBtn.addEventListener('click', saveLineGroup);
                    this.updateButtons();
                },

                changeStep(n) {
                    if (this.currentStep === 1 && n === 1) {
                         if (currentGroup.lines.length === 0) {
                            alert('יש לבחור לפחות קו אחד.');
                            return;
                        }
                        loadStationsForSelection();
                    }

                    this.steps[this.currentStep].classList.remove('active');
                    this.currentStep += n;
                    this.steps[this.currentStep].classList.add('active');
                    this.updateButtons();
                },

                updateButtons() {
                    this.prevBtn.style.display = this.currentStep === 0 ? 'none' : 'inline-block';
                    this.nextBtn.style.display = this.currentStep === this.steps.length - 1 ? 'none' : 'inline-block';
                    this.saveBtn.style.display = this.currentStep === this.steps.length - 1 ? 'inline-block' : 'none';
                },
                
                reset() {
                    this.steps[this.currentStep].classList.remove('active');
                    this.currentStep = 0;
                    this.steps[this.currentStep].classList.add('active');
                    this.updateButtons();
                    document.getElementById('groupName').value = '';
                    document.getElementById('lineNumberInput').value = '';
                    document.getElementById('routesList').innerHTML = '';
                    document.getElementById('selectedLinesList').innerHTML = '';
                    document.getElementById('stationsSelection').innerHTML = '';
                    document.getElementById('lineGroupModalTitle').textContent = 'הוסף קבוצת קווים';
                }
            };
            lineGroupWizard.init();

            // Wizard for creating schedule
            const scheduleWizard = {
                steps: document.querySelectorAll('#scheduleWizard .wizard-step'),
                prevBtn: document.getElementById('schedulePrevBtn'),
                nextBtn: document.getElementById('scheduleNextBtn'),
                finishBtn: document.getElementById('scheduleFinishBtn'),
                currentStep: 0,
                
                init() {
                    this.prevBtn.addEventListener('click', () => this.changeStep(-1));
                    this.nextBtn.addEventListener('click', () => {
                        const selectedDates = getSelectedDates();
                        if (selectedDates.length === 0) {
                            alert('יש לבחור לפחות יום אחד.');
                            return;
                        }
                        if (selectedDates.length > 5) {
                            alert('ניתן לבחור עד 5 ימים.');
                            return;
                        }
                        this.changeStep(1);
                        createSchedule(selectedDates);
                    });
                    this.finishBtn.addEventListener('click', () => closeModal(scheduleModal));
                    this.updateButtons();
                },

                changeStep(n) {
                    this.steps[this.currentStep].classList.remove('active');
                    this.currentStep += n;
                    this.steps[this.currentStep].classList.add('active');
                    this.updateButtons();
                },

                updateButtons() {
                    this.prevBtn.style.display = this.currentStep === 0 ? 'none' : 'inline-block';
                    this.nextBtn.style.display = this.currentStep === this.steps.length - 1 ? 'none' : 'inline-block';
                    this.finishBtn.style.display = this.currentStep === this.steps.length - 1 ? 'inline-block' : 'none';
                    if (this.currentStep === this.steps.length - 1) {
                        this.finishBtn.style.display = 'none'; // Initially hide finish button
                        document.getElementById('downloadSection').classList.add('hidden');
                    }
                },
                 reset() {
                    this.steps[this.currentStep].classList.remove('active');
                    this.currentStep = 0;
                    this.steps[this.currentStep].classList.add('active');
                    this.updateButtons();
                    document.getElementById('dateSelection').innerHTML = '';
                    document.getElementById('progressBar').style.width = '0%';
                    document.getElementById('progressBar').textContent = '0%';
                    document.getElementById('progressText').textContent = '';
                    document.getElementById('downloadSection').classList.add('hidden');
                    document.getElementById('downloadLinks').innerHTML = '';
                }
            };
            scheduleWizard.init();


            // Modal handling
            function openModal(modal) {
                modal.style.display = 'block';
            }

            function closeModal(modal) {
                modal.style.display = 'none';
            }

            closeBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    closeModal(e.target.closest('.modal'));
                });
            });

            window.addEventListener('click', (e) => {
                if (e.target.classList.contains('modal')) {
                    closeModal(e.target);
                }
            });

            helpBtn.addEventListener('click', () => openModal(helpModal));
            
            // Updated feedback button handler
            feedbackBtn.addEventListener('click', () => {
                window.open('https://forms.gle/mLBFNoHi1uUCw5QQA', '_blank');
            });

            addLineGroupBtn.addEventListener('click', () => {
                currentGroup = { name: '', lines: [] };
                currentGroupIndex = -1;
                lineGroupWizard.reset();
                openModal(lineGroupModal);
            });
            
            // API Functions
            function formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            async function fetchRoutes(lineNumber) {
                const today = new Date();
                const twoWeeksFromNow = new Date();
                twoWeeksFromNow.setDate(today.getDate() + 14);

                const dateFrom = formatDate(today);
                const dateTo = formatDate(twoWeeksFromNow);

                const url = `https://open-bus-stride-api.hasadna.org.il/gtfs_routes/list?get_count=false&date_from=${dateFrom}&date_to=${dateTo}&route_short_name=${lineNumber}&order_by=id%20asc`;
                document.getElementById('routesList').innerHTML = '<p>טוען...</p>';
                try {
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const data = await response.json();
                    const uniqueRoutes = Array.from(new Map(data.map(route => [route.route_long_name, route])).values());
                    displayRoutes(uniqueRoutes);
                } catch (error) {
                    console.error('Failed to fetch routes:', error);
                    document.getElementById('routesList').innerHTML = '<p>שגיאה בטעינת המסלולים.</p>';
                }
            }
            
async function fetchStations(routeId) {
    const today = new Date();
    const twoWeeksFromNow = new Date();
    twoWeeksFromNow.setDate(today.getDate() + 14);

    const dateFrom = today.toISOString();
    const dateTo = twoWeeksFromNow.toISOString();

    const url = `https://open-bus-stride-api.hasadna.org.il/gtfs_ride_stops/list?limit=100&get_count=false&arrival_time_from=${encodeURIComponent(dateFrom)}&arrival_time_to=${encodeURIComponent(dateTo)}&gtfs_route__line_refs=${routeId}&order_by=id%20asc`;

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        const stationsMap = new Map();
        data.forEach(stop => {
            if (!stationsMap.has(stop.gtfs_stop_id)) {
                stationsMap.set(stop.gtfs_stop_id, {
                    id: stop.gtfs_stop_id,
                    name: stop.gtfs_stop__name,
                    city: stop.gtfs_stop__city
                });
            }
        });
        return Array.from(stationsMap.values());
    } catch (error) {
        console.error(`Failed to fetch stations for route ${routeId}:`, error);
        return [];
    }
}

async function fetchScheduleForDay(line, date) {
    const startDateTime = new Date(date);
    const endDateTime = new Date(date);
    endDateTime.setHours(endDateTime.getHours() + 3);

    const dateFrom = startDateTime.toISOString();
    const dateTo = endDateTime.toISOString();

    const url = `https://open-bus-stride-api.hasadna.org.il/gtfs_ride_stops/list?limit=100&get_count=false&arrival_time_from=${encodeURIComponent(dateFrom)}&arrival_time_to=${encodeURIComponent(dateTo)}&gtfs_stop__code=${line.station.id}&gtfs_route__line_refs=${line.route.route_short_name}&order_by=id%20asc`;

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data.map(event => ({
            line: event.gtfs_route__route_short_name,
            time: new Date(event.arrival_time).toLocaleTimeString('he-IL', { hour: '2-digit', minute: '2-digit', hour12: false })
        }));
    } catch (error) {
        console.error('Failed to fetch schedule:', error);
        return [];
    }
}                const startTime = new Date(`${dateString}T03:00:00`);
                const endTime = new Date(`${nextDateString}T02:59:59`);

                const arrivals = allStopEvents
                    .filter(event => {
                        const arrivalTime = new Date(event.planned_arrival_time);
                        return event.name === line.station.name &&
                               event.city === line.station.city &&
                               arrivalTime >= startTime &&
                               arrivalTime <= endTime;
                    })
                    .map(event => ({
                        line: line.route.route_short_name,
                        time: new Date(event.planned_arrival_time).toLocaleTimeString('he-IL', { hour: '2-digit', minute: '2-digit', hour12: false })
                    }));

                return arrivals;
            }

            // Line Group Functions
            function displayRoutes(routes) {
                const routesList = document.getElementById('routesList');
                routesList.innerHTML = '';
                if (routes.length === 0) {
                    routesList.innerHTML = '<p>לא נמצאו מסלולים.</p>';
                    return;
                }
                routes.forEach(route => {
                    const div = document.createElement('div');
                    div.className = 'p-2 border-b cursor-pointer hover:bg-gray-100';
                    div.textContent = `${route.agency_name}: ${route.route_long_name}`;
                    div.onclick = () => selectRoute(route);
                    routesList.appendChild(div);
                });
            }

            function selectRoute(route) {
                if (currentGroup.lines.some(l => l.route.id === route.id)) {
                    alert('הקו כבר נבחר.');
                    return;
                }
                currentGroup.lines.push({ route: route, station: null });
                updateSelectedLinesList();
                document.getElementById('routesList').innerHTML = '';
                document.getElementById('lineNumberInput').value = '';
            }

            function updateSelectedLinesList() {
                const list = document.getElementById('selectedLinesList');
                list.innerHTML = '';
                currentGroup.lines.forEach((line, index) => {
                    const li = document.createElement('li');
                    li.textContent = `${line.route.route_short_name} - ${line.route.route_long_name}`;
                    const removeBtn = document.createElement('button');
                    removeBtn.textContent = 'הסר';
                    removeBtn.className = 'text-red-500 ml-2';
                    removeBtn.onclick = () => {
                        currentGroup.lines.splice(index, 1);
                        updateSelectedLinesList();
                    };
                    li.appendChild(removeBtn);
                    list.appendChild(li);
                });
            }

            async function loadStationsForSelection() {
                const container = document.getElementById('stationsSelection');
                container.innerHTML = '<p>טוען תחנות...</p>';
                const stationHtmlPromises = currentGroup.lines.map(async (line, index) => {
                    const stations = await fetchStations(line.route.id);
                    let options = '<option value="">בחר תחנה</option>';
                    stations.forEach(station => {
                        const stationString = JSON.stringify(station);
                        const isSelected = line.station && line.station.id === station.id ? 'selected' : '';
                        options += `<option value='${stationString}' ${isSelected}>${station.name} (${station.city})</option>`;
                    });
                    return `
                        <div class="border p-2 rounded">
                            <p class="font-bold">${line.route.route_short_name}: ${line.route.route_long_name}</p>
                            <select class="station-select w-full p-2 border rounded mt-1" data-line-index="${index}">
                                ${options}
                            </select>
                        </div>
                    `;
                });
                
                const htmls = await Promise.all(stationHtmlPromises);
                container.innerHTML = htmls.join('');

                document.querySelectorAll('.station-select').forEach(select => {
                    select.addEventListener('change', (e) => {
                        const lineIndex = e.target.dataset.lineIndex;
                        if(e.target.value) {
                             currentGroup.lines[lineIndex].station = JSON.parse(e.target.value);
                        } else {
                            currentGroup.lines[lineIndex].station = null;
                        }
                    });
                });
            }

            function saveLineGroup() {
                const groupName = document.getElementById('groupName').value.trim();
                if (!groupName) {
                    alert('יש להזין שם לקבוצה.');
                    return;
                }
                if (currentGroup.lines.some(l => !l.station)) {
                    alert('יש לבחור תחנה עבור כל קו.');
                    return;
                }
                currentGroup.name = groupName;
                if (currentGroupIndex > -1) {
                    lineGroups[currentGroupIndex] = currentGroup;
                } else {
                    lineGroups.push(currentGroup);
                }
                localStorage.setItem('lineGroups', JSON.stringify(lineGroups));
                renderLineGroups();
                closeModal(lineGroupModal);
            }

            function editLineGroup(index) {
                currentGroup = JSON.parse(JSON.stringify(lineGroups[index])); // Deep copy
                currentGroupIndex = index;
                lineGroupWizard.reset();
                document.getElementById('lineGroupModalTitle').textContent = 'ערוך קבוצת קווים';
                document.getElementById('groupName').value = currentGroup.name;
                updateSelectedLinesList();
                openModal(lineGroupModal);
            }

            function deleteLineGroup(index) {
                if (confirm('האם אתה בטוח שברצונך למחוק את קבוצת הקווים?')) {
                    lineGroups.splice(index, 1);
                    localStorage.setItem('lineGroups', JSON.stringify(lineGroups));
                    renderLineGroups();
                }
            }

            // Schedule Functions
            function openScheduleModal(index) {
                currentGroup = lineGroups[index];
                currentGroupIndex = index;
                scheduleWizard.reset();
                populateDateSelection();
                openModal(scheduleModal);
            }

            function populateDateSelection() {
                const container = document.getElementById('dateSelection');
                container.innerHTML = '';
                const today = new Date();
                for (let i = 0; i < 14; i++) {
                    const date = new Date(today);
                    date.setDate(today.getDate() + i);
                    const dateString = date.toLocaleDateString('he-IL', { weekday: 'long', day: '2-digit', month: '2-digit' });
                    const div = document.createElement('div');
                    div.className = 'flex items-center space-x-2 space-x-reverse';
                    div.innerHTML = `
                        <input type="checkbox" id="date-${i}" value="${date.toISOString().split('T')[0]}" class="form-checkbox h-5 w-5 text-blue-600">
                        <label for="date-${i}" class="flex-1">${dateString}</label>
                        <input type="text" placeholder="כינוי (אופציונלי)" class="nickname-input p-1 border rounded w-32">
                    `;
                    container.appendChild(div);
                }
            }
            
            function getSelectedDates() {
                const selected = [];
                document.querySelectorAll('#dateSelection input[type="checkbox"]:checked').forEach(cb => {
                    const nickname = cb.nextElementSibling.nextElementSibling.value.trim();
                    const date = new Date(cb.value);
                    selected.push({
                        date: date,
                        nickname: nickname || date.toLocaleDateString('he-IL', { day: '2-digit', month: '2-digit' })
                    });
                });
                return selected;
            }

            async function createSchedule(selectedDates) {
                 const progressBar = document.getElementById('progressBar');
                 const progressText = document.getElementById('progressText');
                 const downloadSection = document.getElementById('downloadSection');
                 const downloadLinks = document.getElementById('downloadLinks');
                 const finishBtn = document.getElementById('scheduleFinishBtn');
                 
                 downloadSection.classList.add('hidden');
                 downloadLinks.innerHTML = '';

                 const totalCalls = selectedDates.length * currentGroup.lines.length * 2;
                 let completedCalls = 0;

                 const allSchedules = [];

                 for (const day of selectedDates) {
                     let dailySchedule = [];
                     for (const line of currentGroup.lines) {
                         const arrivals = await fetchScheduleForDay(line, day.date);
                         dailySchedule = dailySchedule.concat(arrivals);
                         
                         completedCalls += 2;
                         const progress = Math.round((completedCalls / totalCalls) * 100);
                         progressBar.style.width = `${progress}%`;
                         progressBar.textContent = `${progress}%`;
                         progressText.textContent = `מעבד נתונים... ${progress}%`;
                     }
                     
                     dailySchedule.sort((a,b) => a.time.localeCompare(b.time, 'he-IL', { numeric: true }));
                     allSchedules.push({ nickname: day.nickname, schedule: dailySchedule });

                     const dayData = { nickname: day.nickname, schedule: dailySchedule };
                     addDownloadLink(dayData, currentGroup.name);
                 }
                
                 progressText.textContent = "הפעולה הושלמה!";
                 localStorage.setItem(`schedule_${currentGroup.name}`, JSON.stringify(allSchedules));
                 downloadSection.classList.remove('hidden');
                 finishBtn.style.display = 'inline-block';
                 document.getElementById('scheduleNextBtn').style.display = 'none';

                 document.getElementById('downloadAllPdfBtn').onclick = () => {
                     downloadPdf(allSchedules, `כל הימים, ${currentGroup.name}`);
                 };
            }

            function addDownloadLink(dayData, groupName) {
                const container = document.getElementById('downloadLinks');
                const div = document.createElement('div');
                div.className = 'flex justify-between items-center p-2 bg-gray-100 rounded';
                div.innerHTML = `<span>${dayData.nickname}</span>`;
                const btnGroup = document.createElement('div');
                
                const pdfBtn = document.createElement('button');
                pdfBtn.textContent = 'PDF';
                pdfBtn.className = 'bg-red-500 text-white px-3 py-1 rounded-lg ml-2';
                pdfBtn.onclick = () => downloadPdf([dayData], `${dayData.nickname}, ${groupName}`);
                
                const csvBtn = document.createElement('button');
                csvBtn.textContent = 'CSV';
                csvBtn.className = 'bg-green-500 text-white px-3 py-1 rounded-lg';
                csvBtn.onclick = () => downloadCsv(dayData, `${dayData.nickname}, ${groupName}`);

                btnGroup.appendChild(pdfBtn);
                btnGroup.appendChild(csvBtn);
                div.appendChild(btnGroup);
                container.appendChild(div);
            }

            // Download Functions
            function downloadPdf(data, filename) {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                
                // This is a workaround for jsPDF's limited RTL support.
                // It reverses the strings for display.
                const reverseHebrew = (s) => s.split('').reverse().join('');

                let isFirstPage = true;
                data.forEach(dayData => {
                    if (!isFirstPage) {
                        doc.addPage();
                    }
                    isFirstPage = false;

                    const title = reverseHebrew(dayData.nickname);
                    doc.setFontSize(20);
                    doc.text(title, 105, 15, { align: 'center' });

                    const tableColumn = ["שעה", "קו"].map(reverseHebrew);
                    const tableRows = [];

                    dayData.schedule.forEach(item => {
                        const rowData = [
                            item.time,
                            item.line
                        ];
                        tableRows.push(rowData);
                    });

                    doc.autoTable({
                        head: [tableColumn],
                        body: tableRows,
                        startY: 25,
                        styles: { halign: 'center' },
                        headStyles: { fillColor: [22, 160, 133] },
                        alternateRowStyles: { fillColor: [245, 245, 245] },
                    });

                    const footer = reverseHebrew("נוצר באמצעות לו\"ז מייקר");
                    doc.setFontSize(10);
                    doc.text(footer, 105, doc.internal.pageSize.height - 10, { align: 'center' });
                });

                doc.save(`${filename}.pdf`);
            }

            function downloadCsv(dayData, filename) {
                let csvContent = "data:text/csv;charset=utf-8,\uFEFF"; // BOM for Excel
                csvContent += "קו,שעה\n";
                dayData.schedule.forEach(item => {
                    csvContent += `${item.line},${item.time}\n`;
                });

                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", `${filename}.csv`);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            // Initial Render
            function renderLineGroups() {
                lineGroupsContainer.innerHTML = '';
                lineGroups.forEach((group, index) => {
                    const div = document.createElement('div');
                    div.className = 'bg-white p-4 rounded-lg shadow';
                    div.innerHTML = `
                        <h3 class="font-bold text-xl mb-2">${group.name}</h3>
                        <div class="flex justify-end space-x-2 space-x-reverse">
                            <button data-index="${index}" class="edit-btn bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600">ערוך</button>
                            <button data-index="${index}" class="create-schedule-btn bg-cyan-500 text-white px-3 py-1 rounded hover:bg-cyan-600">צור לו"ז</button>
                            <button data-index="${index}" class="delete-btn bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600">מחק</button>
                        </div>
                    `;
                    lineGroupsContainer.appendChild(div);
                });

                document.querySelectorAll('.edit-btn').forEach(btn => btn.addEventListener('click', (e) => editLineGroup(e.target.dataset.index)));
                document.querySelectorAll('.delete-btn').forEach(btn => btn.addEventListener('click', (e) => deleteLineGroup(e.target.dataset.index)));
                document.querySelectorAll('.create-schedule-btn').forEach(btn => btn.addEventListener('click', (e) => openScheduleModal(e.target.dataset.index)));
            }
            
            document.getElementById('searchRoutesBtn').addEventListener('click', () => {
                const lineNumber = document.getElementById('lineNumberInput').value.trim();
                if (lineNumber) {
                    fetchRoutes(lineNumber);
                }
            });

            renderLineGroups();
        });
    </script>
</body>
</html>

